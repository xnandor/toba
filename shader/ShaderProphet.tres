[gd_resource type="CanvasItemMaterial" load_steps=4 format=1]

[ext_resource path="res://media/prophetfmask.png" type="Texture" id=1]
[ext_resource path="res://media/prophetfmask2.png" type="Texture" id=2]

[sub_resource type="CanvasItemShader" id=1]

_code = {
"fragment": "uniform texture mask;
uniform texture mask2;

float iGlobalTime = TIME/5;
float u = 1.3*UV.x - 0.15;
float v = 1.3*UV.y - 0.15;
vec2 NUV = vec2(u, v);
float edgeAlpha = 1.0;
if (NUV.x < 0 || NUV.x > 1 || NUV.y < 0 || NUV.y > 1) {
	edgeAlpha = 0.0;
}
vec2 iResolution = vec2(400, 300);
color fragColor = tex(TEXTURE, NUV);
color maskColor = tex(mask, NUV);
fragColor.w = edgeAlpha;
vec2 fragCoord = vec2(iResolution.x*NUV.x, iResolution.y*NUV.y);
float rand(vec2 uv) {
    return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);
}

vec2 uv2tri(vec2 uv) {
    float sx = uv.x - uv.y / 2.0; // skewed x
    float offs = step(fract(1.0 - uv.y), fract(sx));
    return vec2(floor(sx) * 2.0 + offs, floor(uv.y));
}

float res = iResolution.y / (5.0 + sin(TIME * 0.5));
vec2 uv = (fragCoord.xy - iResolution.xy / 2.0) / res;
uv += vec2(1.0, 0.5) * iGlobalTime;
vec3 p = vec3(dot(uv, vec2(1.0, 0.5)), dot(uv, vec2(-1.0, 0.5)), uv.y);
vec3 p1 = fract(p);
vec3 p2 = fract(-p);
float d1 = min(min(p1.x, p1.y), p1.z);
float d2 = min(min(p2.x, p2.y), p2.z);
float d = min(d1, d2);
float c1 = (d - 0.04) * res;
float r = rand(uv2tri(uv)) * 6.3;
d = dot(uv, vec2(cos(r), sin(r))) + iGlobalTime * 0.25;
float c2 = (abs(0.5 - fract(d * 4.0)) - 0.18) * res / 4.0;
float c = min(c1+0.2, c2*0.5);
vec4 maskB = vec4(fragColor.x*c*2, fragColor.y*c, fragColor.z*c, maskColor.w);

float field(vec3 p) {
	float speed = 10.0;
	float strength = 7.0 + 0.03 * log(0.000001 + fract(sin(speed*TIME) * 4373.11));
	float accum = 0.0;
	float prev = 0.0;
	float tw = 0.0;
	float i = 0;
	float mag = 0;
	float w = 0;
		// 1
		mag = dot(p, p);
		p = abs(p) / mag + vec3(-0.5, -0.4, -1.5);
		w = exp(-float(0) / 7.0);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
		i = i+1; 
		// 2
		mag = dot(p, p);
		p = abs(p) / mag + vec3(-0.5, -0.4, -1.5);
		w = exp(-float(0) / 7.0);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
		i = i+1; 
		// 3
		mag = dot(p, p);
		p = abs(p) / mag + vec3(-0.5, -0.4, -1.5);
		w = exp(-float(0) / 7.0);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
		i = i+1; 
		// 4
		mag = dot(p, p);
		p = abs(p) / mag + vec3(-0.5, -0.4, -1.5);
		w = exp(-float(0) / 7.0);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
		i = i+1; 
		// 5
		mag = dot(p, p);
		p = abs(p) / mag + vec3(-0.5, -0.4, -1.5);
		w = exp(-float(0) / 7.0);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
		i = i+1; 
		// 6
		mag = dot(p, p);
		p = abs(p) / mag + vec3(-0.5, -0.4, -1.5);
		w = exp(-float(0) / 7.0);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
		i = i+1; 
		// 7
		mag = dot(p, p);
		p = abs(p) / mag + vec3(-0.5, -0.4, -1.5);
		w = exp(-float(0) / 7.0);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
		i = i+1; 
		// 8
		mag = dot(p, p);
		p = abs(p) / mag + vec3(-0.5, -0.4, -1.5);
		w = exp(-float(0) / 7.0);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
		i = i+1; 
		// 9
		mag = dot(p, p);
		p = abs(p) / mag + vec3(-0.5, -0.4, -1.5);
		w = exp(-float(0) / 7.0);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
		i = i+1; 
		// 10
		mag = dot(p, p);
		p = abs(p) / mag + vec3(-0.5, -0.4, -1.5);
		w = exp(-float(0) / 7.0);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
		i = i+1; 
		// 11
		mag = dot(p, p);
		p = abs(p) / mag + vec3(-0.5, -0.4, -1.5);
		w = exp(-float(0) / 7.0);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
		i = i+1; 
		// 12
		mag = dot(p, p);
		p = abs(p) / mag + vec3(-0.5, -0.4, -1.5);
		w = exp(-float(0) / 7.0);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
		i = i+1; 
		// 13
		mag = dot(p, p);
		p = abs(p) / mag + vec3(-0.5, -0.4, -1.5);
		w = exp(-float(0) / 7.0);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
		i = i+1; 
		// 14
		mag = dot(p, p);
		p = abs(p) / mag + vec3(-0.5, -0.4, -1.5);
		w = exp(-float(0) / 7.0);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
		i = i+1; 
		// 15
		mag = dot(p, p);
		p = abs(p) / mag + vec3(-0.5, -0.4, -1.5);
		w = exp(-float(0) / 7.0);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
		i = i+1; 
		// 16
		mag = dot(p, p);
		p = abs(p) / mag + vec3(-0.5, -0.4, -1.5);
		w = exp(-float(0) / 7.0);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
		i = i+1; 
	return max(0.0, 5.0 * accum / tw - 0.7);
}

vec2 gasuv = 2.0 * fragCoord.xy / iResolution.xy - vec2(1.0, 1.0);
vec2 uvs = gasuv * iResolution.xy / max(iResolution.x, iResolution.y);
vec3 gasp = vec3(uvs / 4.0, 0) + vec3(1.0, -1.3, 0.0);
float gasSpeed = 7.0;
gasp += .2 * vec3(sin(gasSpeed*iGlobalTime / 16.0), sin(iGlobalTime / 12.0),  sin(iGlobalTime / 128.0));
float t = field(gasp);
float gasv = (1.0 - exp((abs(gasuv.x) - 1.0) * 6.0)) * (1.0 - exp((abs(gasuv.y) - 1.0) * 6.0));
color gasFragColor = mix(0.4, 1.0, gasv) * vec4(1.8 * t * t * t, 1.4 * t * t, t, 1.0);
float gasAlpha = 0.6-NUV.x*NUV.y;
gasFragColor = gasFragColor - vec4(0.0, -0.3, 0.0, gasAlpha);
color maskColor2 = tex(mask2, NUV);
color final = 0.7*maskColor2*(maskColor2.w*fragColor.w) + fragColor+0.5*(maskB*maskB.w*fragColor.w) + 0.3*gasFragColor*fragColor.w*gasFragColor.w*(0.5-maskColor2.w);

COLOR = final;
",
"fragment_ofs": 0,
"light": "",
"light_ofs": 0,
"vertex": "",
"vertex_ofs": 0
}

[resource]

shader/shader = SubResource( 1 )
shader/shading_mode = 0
shader_param/mask = ExtResource( 1 )
shader_param/mask2 = ExtResource( 2 )

